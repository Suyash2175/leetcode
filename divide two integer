#include <iostream>
#include <climits>
using namespace std;

int divide(int dividend, int divisor) {
    // Handle overflow cases
    if (dividend == INT_MIN && divisor == -1)
        return INT_MAX;

    // Determine the sign of the quotient
    int sign = ((dividend < 0) ^ (divisor < 0)) ? -1 : 1;

    // Convert both dividend and divisor to positive
    long long dvd = labs(dividend);
    long long dvs = labs(divisor);

    // Initialize the quotient
    long long quotient = 0;

    // Perform division using repeated subtraction
    while (dvd >= dvs) {
        long long temp = dvs, multiple = 1;
        while (dvd >= (temp << 1)) {
            temp <<= 1;
            multiple <<= 1;
        }
        dvd -= temp;
        quotient += multiple;
    }

    // Adjust the sign of the quotient
    return sign * quotient;
}

int main() {
    int dividend = 10, divisor = 3;
    cout << "Output: " << divide(dividend, divisor) << endl;

    dividend = 7, divisor = -3;
    cout << "Output: " << divide(dividend, divisor) << endl;

    return 0;
}
